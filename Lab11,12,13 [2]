using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Kpyap10
{
    class Program
    {
        interface IShowInfo
        {
            void ShowInfo();
        }
        public abstract class Undead
        {
            public string Name { get; }
            public string Gender { get; }
            public int? Age { get; }
            protected int Force;
            public int Dodge { get; }
            protected int Exp;
            protected int Level;
            public string specialSkill;
            public List<string> Friends { get; set; }
            protected int Money { get; set; }

            public int GetForce()
            {
                return Force;
            }
            public int GetLevel()
            {
                return Level;
            }
            void KilledMonster(int LvlMonster, string TypeMonster)
            {
                Money += LvlMonster / Level * (TypeMonster == "Human" ? 12 : 6);
                Exp += LvlMonster / Level * (TypeMonster == "Human" ? Convert.ToInt32(new Random().Next(30, 50)) : Convert.ToInt32(new Random().Next(5, 15)));
                CheckLvl();
            }
            void CheckLvl()
            {
                if (Exp > 1000)
                {
                    Level += 1;
                    Exp = Exp - 1000;
                }
            }

            void ReadThomeOfKnowlage(string NameOfSkill, int force)
            {
                specialSkill = NameOfSkill;
                Force += force;
            }


            void AddFriend(string name)
            {
                Friends.Add(name);
            }

            void RemoveFriend(string name)
            {
                Friends.Remove(name);
            }

            public Undead(string name, string gender, int age)
            {
                Level = 1;
                Name = name;
                Age = age;
                Gender = gender;
                Dodge = Convert.ToInt32(new Random().Next(1, 99));
                Force = Convert.ToInt32(new Random().Next(1, 49));
            }

            public Undead(string name, string gender)
            {
                Level = 1;
                Name = name;
                Gender = gender;
                Dodge = Convert.ToInt32(new Random().Next(1, 99));
                Force = Convert.ToInt32(new Random().Next(1, 49));
            }

            public Undead(string name, int age)
            {
                Level = 1;
                Name = name;
                Age = age;
                Dodge = Convert.ToInt32(new Random().Next(1, 99));
                Force = Convert.ToInt32(new Random().Next(1, 49));
            }
            Undead(string name)
            {
                Level = 1;
                Name = name;
                Dodge = Convert.ToInt32(new Random().Next(1, 99));
                Force = Convert.ToInt32(new Random().Next(1, 49));
            }
        }
        class UndeadHuman : Undead, IShowInfo
        {
            string StartLocation;
            int QuestIndex;
            public UndeadHuman(string name, string gender, int age) : base(name, gender, age)
            {
                SetLocation();
                QuestIndex = 01;
                spawn();
                Welcome();
            }

            public UndeadHuman(string name, string gender) : base(name, gender)
            {
                SetLocation();
                spawn();
                QuestIndex = 01;
                Welcome();
            }

            public void ShowInfo()
            {
                Console.WriteLine(Name);
            }
            public virtual void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} отдал честь.");
            }

            public virtual void DonateLvlUp()
            {
                Level += 1;
                Console.WriteLine("Cheer. Ты внес в казну золота на еще один уровень.");
            }

            protected void spawn()
            {
                Console.WriteLine($"Ваш персонаж заспавнился в локации {StartLocation}");
            }

            protected void Welcome()
            {
                Console.WriteLine($"Добро пожаловать в {StartLocation}. Возьмите ваш первый квест в таверне!");
            }
            protected virtual void SetLocation()
            {
                var rand = Convert.ToInt32(new Random().Next(1, 3));
                switch (rand)
                {
                    case 1:
                        StartLocation = "Леса Лордерона";
                        break;
                    case 2:
                        StartLocation = "Громовой Утес";
                        break;
                    case 3:
                        StartLocation = "Оргримар";
                        break;
                }
            }
        }

        class UndeadAnimal : Undead, IShowInfo
        {
            protected string StartLocation;
            int Height;
            string RaceSkill;
            public UndeadAnimal(string name, int height, string gender, int age) : base(name, gender, age)
            {
                Height = height;
                SetLocation();
                spawn();
                Welcome();
                RaceSkill = "Охота";
            }

            public UndeadAnimal(string name, int height, string gender) : base(name, gender)
            {
                Height = height;
                SetLocation();
                spawn();
                Welcome();
                RaceSkill = "Охота";
            }

            public void DonateLvlUp()
            {
                Level += 1;
                Console.WriteLine("Cheer. Ты задонатил на один уровень!");
            }

            public virtual void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} скорчил рожу.");
            }

            protected void spawn()
            {
                Console.WriteLine($"Ваш персонаж воскрес в локации {StartLocation}");
            }

            protected void Welcome()
            {
                Console.WriteLine($"Тебя восресили в локации {StartLocation}. Возьмите ваш первый квест у ближайшего чумного доктора!");
            }
            public virtual void SetLocation()
            {
                var rand = Convert.ToInt32(new Random().Next(1, 3));
                switch (rand)
                {
                    case 1:
                        StartLocation = "Наксрамас";
                        break;
                    case 2:
                        StartLocation = "Кельталас";
                        break;
                    case 3:
                        StartLocation = "Забытые земли";
                        break;
                }
            }

            public void ShowInfo()
            {
                Console.WriteLine(Name);
            }
        }

        class UndeadDoctor : UndeadHuman
        {
            string HeroClass;
            public UndeadDoctor(string name, string gender, int age) : base(name, gender, age)
            {
                HeroClass = "Doctor";

            }

            public UndeadDoctor(string name, int height, string gender) : base(name, gender)
            {
                HeroClass = "Doctor";

            }

            public override void DonateLvlUp()
            {
                Level += 1;
                Console.WriteLine("Cheer. Теперь ты можешь лечить еще лучше");
            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} показал палец свой костлявой рукой.");
            }
        }

        class UndeadTank : UndeadAnimal
        {
            string HeroClass;
            public UndeadTank(string name, int height, string gender, int age) : base(name, height, gender, age)
            {
                HeroClass = "Tank";

            }

            public UndeadTank(string name, int height, string gender) : base(name, height, gender)
            {
                HeroClass = "Tank";

            }


            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} постучал по щиту");
            }
        }

        class UndeadLich : UndeadAnimal
        {
            string HeroClass;
            public UndeadLich(string name, int height, string gender, int age) : base(name, height, gender, age)
            {
                HeroClass = "Lich";

            }

            public UndeadLich(string name, int height, string gender) : base(name, height, gender)
            {
                HeroClass = "Lich";

            }

            public override void SetLocation()
            {
                StartLocation = "Цитадель Ледяной Короны";
            }
            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} воскресил ближайших трупов");
            }
        }

        class UndeadNecro : UndeadHuman
        {
            string HeroClass;
            public UndeadNecro(string name, string gender, int age) : base(name, gender, age)
            {
                HeroClass = "Necro";

            }

            public UndeadNecro(string name, string gender) : base(name, gender)
            {
                HeroClass = "Necro";

            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} некротически вздохнул");
            }
        }

        class UndeadRetard : UndeadAnimal
        {
            string HeroClass;
            public UndeadRetard(string name, int height, string gender, int age) : base(name, height, gender, age)
            {
                HeroClass = "Retard";

            }

            public UndeadRetard(string name, int height, string gender) : base(name, height, gender)
            {
                HeroClass = "Retard";

            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} затупил");
            }
        }

        class UndeadGnoos : UndeadHuman
        {
            string HeroClass;
            public UndeadGnoos(string name, string gender, int age) : base(name, gender, age)
            {
                HeroClass = "Gnoos";

            }

            public UndeadGnoos(string name, int height, string gender) : base(name, gender)
            {
                HeroClass = "Gnoos";

            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} изверг непонятную слизь");
            }
        }

        class UndeadAssasin : UndeadAnimal
        {
            string HeroClass;
            public UndeadAssasin(string name, int height, string gender, int age) : base(name, height, gender, age)
            {
                HeroClass = "Tank";

            }

            public UndeadAssasin(string name, int height, string gender) : base(name, height, gender)
            {
                HeroClass = "Tank";

            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {Name} скрылся в тени");
            }
        }

        class UndeadBard : UndeadHuman
        {
            string HeroClass;
            public UndeadBard(string name, string gender, int age) : base(name, gender, age)
            {
                HeroClass = "Bard";

            }

            public UndeadBard(string name, string gender) : base(name, gender)
            {
                HeroClass = "Bard";

            }

            public override void Emoji()
            {
                Console.WriteLine($"Хе-хе, {base.Name} поиграл на лютне");
            }
        }

        static void PrintHeroes(ArrayList Heroes)
        {
            foreach (var h in Heroes)
            {
                object type = h.GetType();
                switch (type.ToString())
                {
                    case "Kpyap10.Program+UndeadAnimal":
                        var f = (UndeadAnimal)h;
                        Console.WriteLine("Name: " + f.Name + "\tAge: " + f.Age + "\tLevel: " + f.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadDoctor":
                        var d = (UndeadDoctor)h;
                        Console.WriteLine("Name: " + d.Name + "\tAge: " + d.Age + "\tLevel: " + d.GetLevel());
                        break;

                    case "Kpyap10.Program+UndeadTank":
                        var t = (UndeadTank)h;
                        Console.WriteLine("Name: " + t.Name + "\tAge: " + t.Age + "\tLevel: " + t.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadAssasin":
                        var a = (UndeadAssasin)h;
                        Console.WriteLine("Name: " + a.Name + "\tAge: " + a.Age + "\tLevel: " + a.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadBard":
                        var b = (UndeadBard)h;
                        Console.WriteLine("Name: " + b.Name + "\tAge: " + b.Age + "\tLevel: " + b.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadGnoos":
                        var g = (UndeadGnoos)h;
                        Console.WriteLine("Name: " + g.Name + "\tAge: " + g.Age + "\tLevel: " + g.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadNecro":
                        var n = (UndeadNecro)h;
                        Console.WriteLine("Name: " + n.Name + "\tAge: " + n.Age + "\tLevel: " + n.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadHuman":
                        var r = (UndeadHuman)h;
                        Console.WriteLine("Name: " + r.Name + "\tAge: " + r.Age + "\tLevel: " + r.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadLich":
                        var l = (UndeadAnimal)h;
                        Console.WriteLine("Name: " + l.Name + "\tAge: " + l.Age + "\tLevel: " + l.GetLevel());
                        break;
                    case "Kpyap10.Program+Undead":
                        var u = (Undead)h;
                        Console.WriteLine("Name: " + u.Name + "\tAge: " + u.Age + "\tLevel: " + u.GetLevel());
                        break;
                    case "Kpyap10.Program+UndeadRetard":
                        var re = (UndeadRetard)h;
                        Console.WriteLine("Name: " + re.Name + "\tAge: " + re.Age + "\tLevel: " + re.GetLevel());
                        break;


                }

            }
        }

        static List<Undead> SortHeroes(List<Undead> Heroes)
        {
            Console.WriteLine("What u want?\n1.Sort by Level.\n2.Sort by Name.\n3.Sort by Force.\n4.Sort by Dodge\n5.Sort By Age.");
        Flex:
            IOrderedEnumerable<Undead> sortedUsers;
            try
            {
                switch (Convert.ToInt32(Console.ReadLine()))
                {
                    case 1:
                        sortedUsers = Heroes.OrderBy(u => u.GetLevel());
                        Console.WriteLine($"Minimal: {sortedUsers.Min(i => i.GetLevel())}, Maximal {sortedUsers.Max(i => i.GetLevel())}");
                        break;
                    case 2:
                        sortedUsers = Heroes.OrderBy(u => u.Name);
                        break;
                    case 3:
                        sortedUsers = Heroes.OrderBy(u => u.GetForce());
                        Console.WriteLine($"Minimal: {sortedUsers.Min(i => i.GetForce())}, Maximal {sortedUsers.Max(i => i.GetForce())}");
                        break;
                    case 4:
                        sortedUsers = Heroes.OrderBy(u => u.Dodge);
                        Console.WriteLine($"Minimal: {sortedUsers.Min(i => i.Dodge)}, Maximal {sortedUsers.Max(i => i.Dodge)}");
                        break;
                    case 5:
                        sortedUsers = Heroes.OrderBy(u => u.Age);
                        Console.WriteLine($"Minimal: {sortedUsers.Min(i => i.Age)}, Maximal {sortedUsers.Max(i => i.Age)}");
                        break;
                    default:
                        Console.WriteLine("Bad.");
                        goto Flex;
                }
                return sortedUsers.ToList();
            }
            catch (FormatException)
            {
                Console.WriteLine("Bad");
                goto Flex;
            }
        }



        static void Main(string[] args)
        {

            ArrayList Heroes = new ArrayList();



            var AnimalDead = new UndeadAnimal("Чумной", 84, "Man", 14);
            Heroes.Add(AnimalDead);
            AnimalDead.Emoji();
            AnimalDead.DonateLvlUp();
            Console.WriteLine($"Текущий уровень: {AnimalDead.GetLevel()}");
            Console.WriteLine();

            var UndeadDoc = new UndeadDoctor("Убийца", "Man", 32);
            Heroes.Add(UndeadDoc);
            UndeadDoc.Emoji();
            UndeadDoc.DonateLvlUp();
            Console.WriteLine($"Текущий уровень: {AnimalDead.GetLevel()}");
            Console.WriteLine();

            var UndeadTanks = new UndeadTank("Пендос", 42, "Woman", 32);
            Heroes.Add(UndeadTanks);
            UndeadTanks.Emoji();
            UndeadTanks.DonateLvlUp();
            Console.WriteLine();

            var Undeadassassin = new UndeadAssasin("КиллерНуб", 214, "Дикий");
            Heroes.Add(Undeadassassin);
            Undeadassassin.Emoji();
            Console.WriteLine();

            var Undeadbard = new UndeadBard("Гитарист", "Man", 12);
            Heroes.Add(Undeadbard);
            Undeadbard.Emoji();
            Console.WriteLine();

            var Undeadgnoos = new UndeadGnoos("Червяк", 20, "Пустой");
            Heroes.Add(Undeadgnoos);
            Undeadgnoos.Emoji();
            Console.WriteLine();

            var Undeadnecro = new UndeadNecro("Некролит", "Man", 215);
            Heroes.Add(Undeadnecro);
            Undeadnecro.Emoji();
            Console.WriteLine();

            var UndeadMan = new UndeadHuman("ТупаЧелик", "Man");
            Heroes.Add(UndeadMan);
            UndeadMan.Emoji();
            Console.WriteLine();

            var UndeadLich = new UndeadLich("Артас", 193, "Undead", 98);
            Heroes.Add(UndeadLich);
            UndeadLich.Emoji();
            Console.WriteLine();

            var UndeadNotLich = new UndeadRetard("Тард", 140, "Reflex");
            Heroes.Add(UndeadNotLich);
            UndeadNotLich.Emoji();
            Console.WriteLine();


            PrintHeroes(Heroes);

            Console.ReadKey();
        }
    }
}
